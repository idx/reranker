name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist coverage

    - name: Run linting
      run: |
        pip install ruff
        ruff check . || true  # Don't fail on linting errors for now

    - name: Run type checking
      run: |
        pip install mypy
        mypy app.py model_loader.py run.py || true  # Don't fail on type errors for now

    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --tb=short --cov=. --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          - dockerfile: Dockerfile
            image-suffix: ""
            platform: linux/amd64
          - dockerfile: Dockerfile.amd
            image-suffix: "-amd"
            platform: linux/amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.image-suffix }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    services:
      rerank-api:
        image: ghcr.io/${{ github.repository }}:${{ github.sha }}
        ports:
          - 7987:7987
        env:
          CUDA_VISIBLE_DEVICES: -1  # Force CPU mode
        options: --health-cmd="curl -f http://localhost:7987/health" --health-interval=30s --health-timeout=10s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Wait for service to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:7987/health; do sleep 2; done'

    - name: Run API integration tests
      run: |
        # Test health endpoint
        curl -f http://localhost:7987/health
        
        # Test models endpoint
        curl -f http://localhost:7987/models
        
        # Test rerank endpoint
        curl -X POST "http://localhost:7987/v1/rerank" \
          -H "Content-Type: application/json" \
          -d '{
            "model": "bce-reranker-base_v1",
            "query": "machine learning",
            "documents": [
              "Machine learning is a subset of artificial intelligence",
              "Today is a sunny day",
              "Deep learning uses neural networks"
            ],
            "top_n": 2,
            "return_documents": true
          }'

    - name: Test GPU detection script
      run: |
        chmod +x test_detection.sh
        ./test_detection.sh

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test, docker-build, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production..."
        echo "Docker images built and tested successfully!"
        echo "Images available at:"
        echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest (NVIDIA GPU)"
        echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-amd:latest (AMD GPU)"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, docker-build, integration-test]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## What's Changed
          
          ### Features
          - OpenAI-compatible Rerank API
          - Multi-GPU support (NVIDIA CUDA, AMD ROCm)
          - Automatic GPU/CPU detection
          - Docker containerization
          
          ### Docker Images
          - `ghcr.io/${{ github.repository }}:${{ github.ref_name }}` (NVIDIA GPU)
          - `ghcr.io/${{ github.repository }}-amd:${{ github.ref_name }}` (AMD GPU)
          
          ### Usage
          ```bash
          # Automatic detection
          ./start.sh
          
          # Manual deployment
          docker run -p 7987:7987 ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          ```
        draft: false
        prerelease: false