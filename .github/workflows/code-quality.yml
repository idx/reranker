name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black isort mypy

    - name: Run Ruff linter
      run: |
        ruff check . --output-format=github

    - name: Run Black formatter check
      run: |
        black --check --diff .

    - name: Run isort import sorting check
      run: |
        isort --check-only --diff .

    - name: Run MyPy type checking
      run: |
        mypy app.py model_loader.py run.py --ignore-missing-imports

  security:
    name: Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true

    - name: Run Safety dependency check
      run: |
        safety check --json --output safety-report.json || true
        safety check || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock coverage

    - name: Run tests with coverage
      run: |
        pytest tests/ \
          --cov=. \
          --cov-report=html \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=70

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          htmlcov/
          coverage.xml

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check README files exist
      run: |
        test -f README.md
        test -f README.ja.md
        test -f API_REFERENCE.md

    - name: Check documentation links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/workflows/markdown-link-check-config.json'

    - name: Validate Docker Compose files
      run: |
        docker-compose -f docker-compose.yml config
        docker-compose -f docker-compose.cpu.yml config
        docker-compose -f docker-compose.amd.yml config

    - name: Check shell scripts
      run: |
        # Install shellcheck
        sudo apt-get update && sudo apt-get install -y shellcheck
        
        # Check all shell scripts
        find . -name "*.sh" -type f -exec shellcheck {} \;

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit

    - name: Audit Python dependencies
      run: |
        pip-audit --desc --format=json --output=audit-report.json || true
        pip-audit --desc

    - name: Check for outdated packages
      run: |
        pip install -r requirements.txt
        pip list --outdated

    - name: Upload audit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-audit
        path: audit-report.json